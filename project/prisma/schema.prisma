generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Shipment {
  id                Int      @id @default(autoincrement())
  trackingId        String   @unique
  invoiceNumber     String   @unique
  
  // Basic form fields
  agency            String?
  office            String?
  senderName        String
  senderAddress     String
  recipientName     String
  recipientAddress  String
  destination       String
  
  // Shipping details
  deliveryTime      String?
  invoiceStatus     String?
  deliveryStatus    String?
  shippingMode      String?
  packaging         String?
  vendor            String?
  serviceMode       String?
  
  // Package information
  amount            Int      @default(1)
  packageDescription String?
  weight            Float    @default(0)
  length            Float    @default(0)
  width             Float    @default(0)
  height            Float    @default(0)
  weightVol         Float    @default(0)
  fixedCharge       Float    @default(0)
  decValue          Float    @default(0)
  
  // Pricing information
  price             Float    @default(0)
  discount          Float    @default(0)
  fuelSurcharge     Float    @default(0)
  insurance         Float    @default(0)
  customs           Float    @default(0)
  tax               Float    @default(0)
  declaredValue     Float    @default(0)
  reissue           Float    @default(0)
  
  // Calculated values
  totalCost         Float
  subtotal          Float    @default(0)

  // Metadata
  manualRate        Boolean  @default(false)
  totalPackages     Int      @default(0)
  totalWeight       Float    @default(0)
  totalWeightVol    Float    @default(0)
  
  // Date fields
  shipmentDate      DateTime @default(now())
  
  // JSON fields for complex data
  packages          Json?    // Array of package objects
  packageTotals     Json?    // Totals object
  calculatedValues  Json?    // Calculated values object
  
  createdAt         DateTime @default(now())
  
  // Relations
  invoices          Invoice[]
}

model Customers {
  id                Int      @id @default(autoincrement()) 
  CompanyName       String  @unique
  PersonName        String
  Email             String   
  Phone             String
  DocumentType      String
  DocumentNumber    String
  Country           String
  State             String
  City              String
  Zip               String
  Address           String
  ActiveStatus      String
  FilePath          String   
  createdAt         DateTime @default(now())
  
  // Financial fields
  currentBalance    Float    @default(0)
  creditLimit       Float    @default(0)
  
  // Relations
  invoices          Invoice[]
  transactions      CustomerTransaction[]
  creditNotes       CreditNote[]
}


model Vendors {
  id                Int      @id @default(autoincrement()) 
  CompanyName       String  @unique
  PersonName        String
  Email             String   
  Phone             String
  Country           String
  State             String
  City              String
  Zip               String
  Address           String
  createdAt         DateTime @default(now())
  
  // Financial fields
  currentBalance    Float    @default(0)
  creditLimit       Float    @default(0)
  
  // Relations
  invoices          Invoice[]
  transactions      VendorTransaction[]
  debitNotes        DebitNote[]
}

model Recipients {
  id                Int      @id @default(autoincrement()) 
  CompanyName       String   @unique
  PersonName        String
  Email             String   
  Phone             String
  Country           String
  State             String
  City              String
  Zip               String
  Address           String
  createdAt         DateTime @default(now())
}

model DeliveryTime {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model Agency {
  id        Int   @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
}

model Office {
  id        Int   @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
}

model InvoiceStatus {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model DeliveryStatus {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model ShippingMode {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model PackagingType {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}


model ServiceMode {
  id        Int   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

model Zone {
  id        Int   @id @default(autoincrement())
  code      String
  country   String
  zone      String
  service   String
  phoneCode String?
}

model ZoneUpload {
  id        Int      @id @default(autoincrement())
  service   String   @unique
  uploadedAt DateTime @default(now())
}

model Rate {
  id         Int     @id @default(autoincrement())
  weight     Float
  vendor    String
  service   String
  zone       Int
  price      Int
  docType    String
}

model filename {
  id Int @id @default(autoincrement())
  filename String
  vendor String
  service String
  fileType String // "rate" or "zone"
  uploadedAt DateTime @default(now())
  
  @@unique([service, fileType])
}

// Company Account for tracking our own balance
model CompanyAccount {
  id              Int      @id @default(autoincrement())
  name            String   @default("Main Company Account")
  currentBalance  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  transactions    CompanyTransaction[]
}

// Customer Transaction History
model CustomerTransaction {
  id              Int      @id @default(autoincrement())
  customerId      Int
  customer        Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  type            String   // "CREDIT", "DEBIT"
  amount          Float
  description     String
  reference       String?  // Payment reference, etc.
  invoice         String?  // Invoice number
  
  // Balance tracking
  previousBalance Float
  newBalance      Float
  
  createdAt       DateTime @default(now())
  
  @@index([customerId])
  @@index([createdAt])
}

// Vendor Transaction History
model VendorTransaction {
  id              Int      @id @default(autoincrement())
  vendorId        Int
  vendor          Vendors @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  type            String   // "CREDIT", "DEBIT"
  amount          Float
  description     String
  reference       String?  // Payment reference, etc.
  invoice         String?  // Invoice number
  
  // Balance tracking
  previousBalance Float
  newBalance      Float
  
  createdAt       DateTime @default(now())
  
  @@index([vendorId])
  @@index([createdAt])
}

// Company Transaction History
model CompanyTransaction {
  id              Int           @id @default(autoincrement())
  accountId       Int
  account         CompanyAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  type            String        // "CREDIT", "DEBIT"
  amount          Float
  description     String
  reference       String?       // Payment reference, etc.
  invoice         String?       // Invoice number
  
  // Balance tracking
  previousBalance Float
  newBalance      Float
  
  createdAt       DateTime @default(now())
  
  @@index([accountId])
  @@index([createdAt])
}

model vendorservice{
  id Int @id @default(autoincrement())
  vendor String
  service String
}

/// Accounts module: Payments
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
  EQUITY
}

enum PartyType {
  US
  CUSTOMER
  VENDOR
}

enum PaymentMode {
  CASH
  BANK_TRANSFER
  CARD
  CHEQUE
}

model Payment {
  id              Int              @id @default(autoincrement())
  transactionType TransactionType
  category        String
  date            DateTime
  amount          Float

  // From: Customer or Us
  fromPartyType   PartyType
  fromCustomerId  Int?
  fromCustomer    String

  // To: Vendor or Us
  toPartyType     PartyType
  toVendorId      Int?
  toVendor        String

  mode            PaymentMode?
  reference       String?
  invoice         String?
  description     String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Invoice {
  id              Int      @id @default(autoincrement())
  invoiceNumber   String   @unique
  invoiceDate     DateTime
  receiptNumber   String?
  trackingNumber  String?
  destination     String
  dayWeek         String?  // D/W field
  weight          Float
  profile         String   // Profile dropdown
  fscCharges      Float    @default(0)
  
  // Line items as JSON
  lineItems       Json     // Array of { description: string, value: number }
  
  // Customer, vendor and shipment info
  customerId      Int?
  customer        Customers? @relation(fields: [customerId], references: [id])
  vendorId        Int?
  vendor          Vendors? @relation(fields: [vendorId], references: [id])
  shipmentId      Int?
  shipment        Shipment? @relation(fields: [shipmentId], references: [id])
  
  // Additional fields
  disclaimer      String?  // Editable disclaimer text
  
  // Status and metadata
  status          String   @default("Pending") // Pending, Paid, Overdue, Cancelled
  totalAmount     Float
  currency        String   @default("USD")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  debitNotes      DebitNote[]
  creditNotes     CreditNote[]
}

model DebitNote {
  id              Int      @id @default(autoincrement())
  debitNoteNumber String   @unique
  billId          Int?     // Reference to the original bill/invoice
  bill            Invoice? @relation(fields: [billId], references: [id])
  vendorId        Int?
  vendor          Vendors? @relation(fields: [vendorId], references: [id])
  amount          Float
  date            DateTime
  description     String?
  currency        String   @default("USD")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CreditNote {
  id               Int      @id @default(autoincrement())
  creditNoteNumber String   @unique
  invoiceId        Int?     // Reference to the original customer invoice
  invoice          Invoice? @relation(fields: [invoiceId], references: [id])
  customerId       Int?
  customer         Customers? @relation(fields: [customerId], references: [id])
  amount           Float
  date             DateTime
  description      String?
  currency         String   @default("USD")
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Chart of Accounts Models
model ChartOfAccount {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  accountName String
  category    String   // Asset, Liability, Equity, Expense, Revenue
  type        String   // Current Asset, Fixed Asset, Current Liability, etc.
  debitRule   String   // "Increases" or "Decreases"
  creditRule  String   // "Increases" or "Decreases"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  journalLines   JournalEntryLine[]
}

model JournalEntry {
  id              Int      @id @default(autoincrement())
  entryNumber     String   @unique
  date            DateTime
  description     String
  reference       String?
  totalDebit      Float
  totalCredit     Float
  isPosted        Boolean  @default(false)
  postedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  lines     JournalEntryLine[]
}

model JournalEntryLine {
  id              Int      @id @default(autoincrement())
  journalEntryId  Int
  accountId       Int
  debitAmount     Float    @default(0)
  creditAmount    Float    @default(0)
  description     String?
  reference       String?
  createdAt       DateTime @default(now())

  // Relations
  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account      ChartOfAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
}